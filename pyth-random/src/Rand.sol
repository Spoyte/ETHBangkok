pragma solidity ^0.8.0;
 
import { IEntropyConsumer } from "@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol";
import { IEntropy } from "@pythnetwork/entropy-sdk-solidity/IEntropy.sol";
 
contract Random is IEntropyConsumer {

  event MatchRequestSequenceNumber(uint64 sequenceNumber);
  event RandomResult(uint64 sequenceNumber, uint64 randomNumber);

  IEntropy entropy;
  uint64 public sequenceNumber_;

  // @param entropyAddress The address of the entropy contract.
  constructor(address entropyAddress) {
    entropy = IEntropy(entropyAddress);
  }
 
  // @param userRandomNumber The random number generated by the user.
  function requestRandomNumber(bytes32 userRandomNumber) external payable {
    // Get the default provider and the fee for the request
    address entropyProvider = entropy.getDefaultProvider();
    uint256 fee = entropy.getFee(entropyProvider);
 
    // Request the random number with the callback
    uint64 sequenceNumber = entropy.requestWithCallback{ value: fee }(
      entropyProvider,
      userRandomNumber
    );
    // Store the sequence number to identify the callback request
    //sequenceNumber_ = sequenceNumber;
    emit MatchRequestSequenceNumber(sequenceNumber);
    
  }
 
  // @param sequenceNumber The sequence number of the request.
  // @param provider The address of the provider that generated the random number. If your app uses multiple providers, you can use this argument to distinguish which one is calling the app back.
  // @param randomNumber The generated random number.
  // This method is called by the entropy contract when a random number is generated.
  function entropyCallback(
    uint64 sequenceNumber,
    address,
    bytes32 randomNumber
  ) internal override {
    // Implement your callback logic here.
    emit RandomResult(sequenceNumber, uint64(uint256(randomNumber)));
  }
 
  // This method is required by the IEntropyConsumer interface.
  // It returns the address of the entropy contract which will call the callback.
  function getEntropy() internal view override returns (address) {
    return address(entropy);
  }
}
 